#include <iostream>
#include <vector>
#include <queue>
#include <tuple>
using namespace std;


int primsMST(vector<vector<int>>adj[],int v,vector<tuple<int,int,int>>&mst){

    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    vector<bool>visited(v,false);
    vector<int>parent(v,-1);
    int sum = 0;
    pq.push({0,0});
    while(!pq.empty()){
        auto it = pq.top();
        pq.pop();
        int node = it.second;
        int weight = it.first;

        if(visited[node]) continue;

        visited[node]=true;
        sum+=weight;

        mst.push_back(make_tuple(parent[node],node,weight));

        for(auto it : adj[node]){
            int adjNode = it[0];
            int adjW = it[1];

            if(!visited[adjNode]){
                pq.push({adjW,adjNode});
                parent[adjNode] = node;
            }
        }
    }
    return sum;
}

int main(){

    int v = 5;
    vector<vector<int>>adj[v];
    vector<tuple<int,int,int>>mst;
    adj[0].push_back({1,6});
    adj[0].push_back({3, 6});
    adj[1].push_back({0, 2});
    adj[1].push_back({2, 3});
    adj[1].push_back({3, 8});
    adj[2].push_back({1, 3});
    adj[2].push_back({4, 7});
    adj[3].push_back({0, 6});
    adj[3].push_back({1, 8});
    adj[4].push_back({2, 7});

    int result = primsMST(adj,v,mst);

    for (auto edge : mst){
        int parent,node,weight;
        tie(parent,node,weight) = edge;
          cout << parent << " - " << node << " with weight " << weight << endl;
    }
    cout<<"Total cost : "<<result;
return 0;
}
