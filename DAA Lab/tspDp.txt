#include <iostream>
#include <climits>
using namespace std;

int distanceMatrix[10][10]; // Distance matrix between cities
int dpTable[10][1025];      // DP table to store minimum cost for subsets of cities
int numCities;             // Number of cities

// Function to solve TSP using Dynamic Programming
int findMinCost(int currentCity, int visitedMask) {
    if (visitedMask == (1 << numCities) - 1) {
        return distanceMatrix[currentCity][0]; // Return to the starting city
    }

    if (dpTable[currentCity][visitedMask] != -1) {
        return dpTable[currentCity][visitedMask]; // Return precomputed result
    }

    int minCost = INT_MAX; // Initialize minimum cost as infinity

    for (int nextCity = 0; nextCity < numCities; nextCity++) {
        if ((visitedMask & (1 << nextCity)) == 0) { // If the city is unvisited
            int cost = distanceMatrix[currentCity][nextCity] +
                       findMinCost(nextCity, visitedMask | (1 << nextCity));
            minCost = min(minCost, cost); // Update minimum cost
        }
    }

    return dpTable[currentCity][visitedMask] = minCost; // Store and return the result
}

int main() {
    // Input number of cities
    cout << "Enter the number of cities: ";
    cin >> numCities;

    // Input the distance matrix
    cout << "Enter the distance matrix:\n";
    for (int i = 0; i < numCities; i++) {
        for (int j = 0; j < numCities; j++) {
            cin >> distanceMatrix[i][j];
        }
    }

    // Initialize the DP table with -1
    for (int i = 0; i < numCities; i++) {
        for (int j = 0; j < (1 << numCities); j++) {
            dpTable[i][j] = -1;
        }
    }

    // Calculate the minimum cost starting from city 0 with the mask indicating city 0 is visited
    int minCost = findMinCost(0, 1);

    // Output the result
    cout << "Minimum cost of the Traveling Salesman Problem: " << minCost << endl;

    return 0;
}
